{
	"info": {
		"_postman_id": "c39a67cf-fadf-4f4d-9d42-468309f7d735",
		"name": "firebase-project-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "29729553"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"Validating entered body data\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.firstName).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.lastName).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.mobileNo).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.password).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.confirmPassword).to.not.be.null.and.not.equal('');\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(reqBody.email).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.email).to.match(emailRegex, 'Invalid email format');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 5\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(6)\r",
							"});\r",
							"pm.test(\"User Register successfully\", function () {\r",
							"    if(pm.expect(pm.response.message) !== \"User created and data uploaded successfully\"){\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`)\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"User created and data uploaded successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"sdafd\",\r\n    \"lastName\":\"choudhary\",\r\n    \"mobileNo\":\"9876543210\",\r\n    \"email\":\"helloworld56fds1@gmail.com\",\r\n    \"password\":\"admin123\",\r\n    \"confirmPassword\":\"\"\r\n    // \"profilePhoto\":\"one.jpg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/register"
			},
			"response": []
		},
		{
			"name": "createFirebaseToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"email and password is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.password).to.not.be.null.and.not.equal('');\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(reqBody.email).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.email).to.match(emailRegex, 'Invalid email format');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 1\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(2)\r",
							"});\r",
							"pm.test(\"API Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"pm.test(\"uid present in header\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.request.headers.get('uid')).to.not.be.null.and.not.equal('');\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "uid",
						"value": "",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"ashok@gmail.com\",\r\n    \"password\":\"ashok1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/create-user-firebase-token"
			},
			"response": []
		},
		{
			"name": "update-user-details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"payload is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    if(reqBody.firstName !== undefined){\r",
							"      pm.expect(reqBody.firstName).to.not.be.null.and.not.equal('');\r",
							"    }\r",
							"    if(reqBody.lastName !== undefined){\r",
							"      pm.expect(reqBody.lastName).to.not.be.null.and.not.equal('');\r",
							"    }\r",
							"    if(reqBody.mobileNo !== undefined){\r",
							"      pm.expect(reqBody.mobileNo).to.not.be.null.and.not.equal('');\r",
							"    }\r",
							"});\r",
							"pm.test(\"payload length will be greater then or equal to 1\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(1)\r",
							"});\r",
							"pm.test(\"API Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"pm.test(\"uid present in header\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.request.headers.get('uid')).to.not.be.null.and.not.equal('');\r",
							"})\r",
							"pm.test(\"User data updated successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"User data updated successfully\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "uid",
						"value": "u1gpZ688xNMDNjl2fWLBcPqhI9a2",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\":\"\",\r\n    \"lastName\":\"user\",\r\n    \"mobileNo\":\"1234567890\",\r\n    \"profilePhoto\":\"image2.jpg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/update-user"
			},
			"response": []
		},
		{
			"name": "create-new-post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"payload data is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.title).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.description).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.slug).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 2\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(3)\r",
							"});\r",
							"pm.test(\"API Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"uid present in header\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.request.headers.get('uid')).to.not.be.null.and.not.equal('');\r",
							"})\r",
							"pm.test(\"Post created successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"Post created successfully\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "uid",
						"value": "FhpH2r2bn4R7HuQgASo3Q7346FA3",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"this is first title\",\r\n    \"description\":\"first description\",\r\n    \"slug\":\"fs\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/create-new-post"
			},
			"response": []
		},
		{
			"name": "upload-image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"API Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"uid present in header\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.request.headers.get('uid')).to.not.be.null.and.not.equal('');\r",
							"})\r",
							"pm.test(\"Image uploaded successfully\",function(){\r",
							"    pm.expect(pm.response.json().message).to.eql(\"Image uploaded successfully\"); \r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "uid",
						"value": "u1gpZ688xNMDNjl2fWLBcPqhI9a2",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/C:/Users/saura/Downloads/alex-machado-80sv993lUKI-unsplash.jpg"
						}
					]
				},
				"url": "http://localhost:8000/user/upload-image"
			},
			"response": []
		},
		{
			"name": "tag-user-to-post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"Validating entered body data\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.userUid).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 1\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(2)\r",
							"});\r",
							"pm.test(\"API Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"User tagged on this post successfully\", function () {\r",
							"    if(pm.expect(pm.response.message) !== \"User tagged on this post successfully\"){\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`)\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"User tagged on this post successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postUid\":\"adfpDAKr2sVyRcEsdfde\",\r\n    \"userUid\":\"6TSpDAKr2sVyRcE7Xqgx\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/tag-user"
			},
			"response": []
		},
		{
			"name": "remove-tag-user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"Validating entered body data\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.userUid).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 1\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(2)\r",
							"});\r",
							"pm.test(\"API Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"User tagged remove from this post.\", function () {\r",
							"    if(pm.expect(pm.response.message) !== \"User tagged remove from this post.\"){\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`)\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"User tagged remove from this post.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postUid\":\"KF6c36Lqjt9SmftdwG4U\",\r\n    \"userUid\":\"6TSpDAKr2sVyRcE7Xqgx\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/remove-tag-user"
			},
			"response": []
		},
		{
			"name": "get all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('Limit should be greater then 0', function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"    const limitValue = queryParams.find(param => param.key === 'limit')?.value;\r",
							"    pm.expect(limitValue).to.not.be.undefined.not.be.null;\r",
							"    pm.expect(parseInt(limitValue)).to.be.greaterThan(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/user/all-posts/1?limit=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"user",
						"all-posts",
						"1"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add-comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"body data is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.userUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.comment).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 2\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(3)\r",
							"});\r",
							"pm.test(\"You commented on this post successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"You commented on this post successfully\");   \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userUid\":\"FhpH2r2bn4R7HuQgASo3Q7346FA3\",\r\n    \"comment\":\"Hello world\",\r\n    \"postUid\":\"KF6c36Lqjt9SmftdwG4U\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/add-comment"
			},
			"response": []
		},
		{
			"name": "delete-comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"body data is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.commentUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 2\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(3)\r",
							"});\r",
							"pm.test(\"Comment deleted successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"Comment deleted successfully\");   \r",
							"});\r",
							"pm.test(\"API Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"commentUid\":\"jHLC26ZLFZf2my7rCoET\",\r\n    \"postUid\":\"tES87miMsLmQZS2BAXTY\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/delete-comment"
			},
			"response": []
		},
		{
			"name": "edit-comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"body data is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.commentUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(reqBody.comment).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then 2\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(3)\r",
							"});\r",
							"pm.test(\"Comment edited successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"Comment edited successfully\");   \r",
							"});\r",
							"pm.test(\"API Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"commentUid\":\"jHLC26ZLFZf2my7rCoET\",\r\n    \"postUid\":\"tES87miMsLmQZS2BAXTY\",\r\n    \"comment\":\"this is my updated two comment sdf\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/edit-comment"
			},
			"response": []
		},
		{
			"name": "get-single-post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const reqBody = JSON.parse(pm.request.body.raw)\r",
							"pm.test(\"body data is in correct format\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(reqBody.postUid).to.not.be.null.and.not.equal('');\r",
							"});\r",
							"pm.test(\"payload length will be greater then or equal to 1\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error: ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(Object.keys(reqBody).length).to.be.at.least(1)\r",
							"});\r",
							"pm.test(\"API Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"postUid\":\"KF6c36Lqjt9SmftdwG4U\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/get-single-post"
			},
			"response": []
		},
		{
			"name": "save-user-notification-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"validate uuid and token\", function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.request.headers.get('uuid')).to.not.be.null.and.not.equal('');\r",
							"    pm.expect(pm.request.headers.get('token')).to.not.be.null.and.not.equal('');\r",
							"})\r",
							"pm.test(\"Push notification token added to database successfully\",function(){\r",
							"    if (pm.response.code !== 200) {\r",
							"        console.error(`status code : ${pm.response.code} Error : ${pm.response.text()}`);\r",
							"    }\r",
							"    pm.expect(pm.response.json().message).to.eql(\"Push notification token added to database successfully\");   \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "token",
						"value": "dtu2EslkmoeNCf_TE7aEEL:APA91bEdr6QgGe70bNABNhboZrpg2wUTMxzTv0ItNkn0iEOlEUWKyzhBZQLF4G81Q_12o0MRaKYBpQySOFJoFMlUC6fz5Ku2NrRCnB4djogrMefy-yKPB9jH2rQFowmxE-PMIO6MW1-v",
						"type": "text"
					},
					{
						"key": "userUid",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "uuid",
						"value": "AtiLAlBKqQbdAtKIuGSUfoO3hgj1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8000/user/save-user-notification-token"
			},
			"response": []
		}
	]
}
